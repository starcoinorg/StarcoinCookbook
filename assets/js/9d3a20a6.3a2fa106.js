"use strict";(self.webpackChunkstarcoin_cookbook=self.webpackChunkstarcoin_cookbook||[]).push([[662],{3905:function(t,n,e){e.d(n,{Zo:function(){return p},kt:function(){return h}});var a=e(7294);function r(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function o(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,a)}return e}function i(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?o(Object(e),!0).forEach((function(n){r(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function s(t,n){if(null==t)return{};var e,a,r=function(t,n){if(null==t)return{};var e,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)e=o[a],n.indexOf(e)>=0||(r[e]=t[e]);return r}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)e=o[a],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}var c=a.createContext({}),l=function(t){var n=a.useContext(c),e=n;return t&&(e="function"==typeof t?t(n):i(i({},n),t)),e},p=function(t){var n=l(t.components);return a.createElement(c.Provider,{value:n},t.children)},u={inlineCode:"code",wrapper:function(t){var n=t.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(t,n){var e=t.components,r=t.mdxType,o=t.originalType,c=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),d=l(e),h=r,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||o;return e?a.createElement(m,i(i({ref:n},p),{},{components:e})):a.createElement(m,i({ref:n},p))}));function h(t,n){var e=arguments,r=n&&n.mdxType;if("string"==typeof t||r){var o=e.length,i=new Array(o);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=t,s.mdxType="string"==typeof t?t:r,i[1]=s;for(var l=2;l<o;l++)i[l]=e[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,e)}d.displayName="MDXCreateElement"},8769:function(t,n,e){e.r(n),e.d(n,{assets:function(){return c},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return l}});var a=e(3117),r=(e(7294),e(3905));const o={},i="Interaction with the contract by RPC and SDK",s={unversionedId:"web3/interacting-with-the-contract",id:"web3/interacting-with-the-contract",title:"Interaction with the contract by RPC and SDK",description:"Generally, there are 4 steps for a dapp to interact with the Starcoin blockchain:",source:"@site/docs/04-web3/04-interacting-with-the-contract.md",sourceDirName:"04-web3",slug:"/web3/interacting-with-the-contract",permalink:"/docs/web3/interacting-with-the-contract",draft:!1,editUrl:"https://github.com/starcoinorg/starcoin-cookbook/edit/main/docs/04-web3/04-interacting-with-the-contract.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Starcoin sdk",permalink:"/docs/web3/starcoin-sdks"},next:{title:"Understanding and bcs serialize",permalink:"/docs/web3/understanding-resource-and-bcs/"}},c={},l=[{value:"1. Connect to StarMask",id:"1-connect-to-starmask",level:2},{value:"2. Generate the rawUserTransaction hex string while calling the contract with params",id:"2-generate-the-rawusertransaction-hex-string-while-calling-the-contract-with-params",level:2},{value:"3. Wake up the StarMask and asking the user to confirm the transaction",id:"3-wake-up-the-starmask-and-asking-the-user-to-confirm-the-transaction",level:2},{value:"4. Wait until the transaction was confirmed on the Starcoin blockchain, and display the result",id:"4-wait-until-the-transaction-was-confirmed-on-the-starcoin-blockchain-and-display-the-result",level:2},{value:"Reference",id:"reference",level:2}],p={toc:l};function u(t){let{components:n,...o}=t;return(0,r.kt)("wrapper",(0,a.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interaction-with-the-contract-by-rpc-and-sdk"},"Interaction with the contract by RPC and SDK"),(0,r.kt)("p",null,"Generally, there are 4 steps for a dapp to interact with the Starcoin blockchain:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Connect to StarMask"),(0,r.kt)("li",{parentName:"ol"},"Generate the rawUserTransaction hex string while calling the contract with params"),(0,r.kt)("li",{parentName:"ol"},"Wake up the StarMask and asking the user to confirm the transaction"),(0,r.kt)("li",{parentName:"ol"},"Wait until the transaction was confirmed on the Starcoin blockchain, and display the result")),(0,r.kt)("p",null,"Let's explain each step in details with examples from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/starcoinorg/starmask-test-dapp"},"starmask-test-dapp"),"."),(0,r.kt)("h2",{id:"1-connect-to-starmask"},"1. Connect to StarMask"),(0,r.kt)("p",null,"To interact with the Chrome extension StarMask, a Dapp must check whether it is installed or not:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import StarMaskOnboarding from "@starcoin/starmask-onboarding";\n\nconst { isStarMaskInstalled } = StarMaskOnboarding;\n\nlet onboarding;\ntry {\n  onboarding = new StarMaskOnboarding({ forwarderOrigin });\n} catch (error) {\n  console.error(error);\n}\n\nconst onClickInstall = () => {\n  onboardButton.innerText = "Onboarding in progress";\n  onboardButton.disabled = true;\n  onboarding.startOnboarding();\n};\n\nif (!isStarMaskInstalled()) {\n  onboardButton.innerText = "Click here to install StarMask!";\n  onboardButton.onclick = onClickInstall;\n  onboardButton.disabled = false;\n} else if (isStarMaskConnected()) {\n  onboardButton.innerText = "Connected";\n  onboardButton.disabled = true;\n  if (onboarding) {\n    onboarding.stopOnboarding();\n  }\n}\n')),(0,r.kt)("p",null,"If StarMask is installed, it will inject a global object ",(0,r.kt)("inlineCode",{parentName:"p"},"window.starcoin")," into the Dapp, then we can use it to connect to StarMask,\nand get the connected account address:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const handleNewAccounts = (newAccounts) => {\n  accounts = newAccounts;\n  accountsDiv.innerHTML = accounts;\n};\n\nconst onClickConnect = async () => {\n  try {\n    const newAccounts = await window.starcoin.request({\n      method: "stc_requestAccounts",\n    });\n    handleNewAccounts(newAccounts);\n  } catch (error) {\n    console.error(error);\n  }\n};\n')),(0,r.kt)("h2",{id:"2-generate-the-rawusertransaction-hex-string-while-calling-the-contract-with-params"},"2. Generate the rawUserTransaction hex string while calling the contract with params"),(0,r.kt)("p",null,"If we want to call a contract(execute a transaction), for example, ",(0,r.kt)("inlineCode",{parentName:"p"},"0x1::TransferScripts::peer_to_peer_v2")," can transfer any amount of any token to others."),(0,r.kt)("p",null,"First, we need to confirm the contract's params number and type."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/starcoinorg/starcoin-framework/blob/main/sources/TransferScripts.move#L15"},"here")," is the source code of ",(0,r.kt)("inlineCode",{parentName:"p"},"0x1::TransferScripts::peer_to_peer_v2"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"public(script) fun peer_to_peer_v2<TokenType: store>(account: signer, payee: address, amount: u128) {\n")),(0,r.kt)("p",null,"omit the first param(type is ",(0,r.kt)("inlineCode",{parentName:"p"},"signer"),"), we need to pass 2 params while calling this contract on dapp:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"payee"),", type is ",(0,r.kt)("inlineCode",{parentName:"li"},"address")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"amount"),", type is ",(0,r.kt)("inlineCode",{parentName:"li"},"u128"))),(0,r.kt)("p",null,"Second, we need to generate the scriptFunction while calling the contract with the corresponding params."),(0,r.kt)("p",null,"There are two ways to generate the scriptFunction. One is ",(0,r.kt)("inlineCode",{parentName:"p"},"utils.tx.encodeScriptFunction"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { utils } from "@starcoin/starcoin";\n\nconst functionId = "0x1::TransferScripts::peer_to_peer_v2";\nconst strTypeArgs = ["0x1::STC::STC"];\nconst tyArgs = utils.tx.encodeStructTypeTags(strTypeArgs);\n\nconst toAccount = document.getElementById("toAccountInput").value;\n\nconst BIG_NUMBER_NANO_STC_MULTIPLIER = new BigNumber("1000000000");\nconst sendAmountSTC = new BigNumber(\n  String(document.getElementById("amountInput").value),\n  10\n);\nconst sendAmountNanoSTC = sendAmountSTC.times(BIG_NUMBER_NANO_STC_MULTIPLIER);\nconst sendAmountHex = `0x${sendAmountNanoSTC.toString(16)}`;\n\n// Multiple BcsSerializers should be used in different closures, otherwise, the latter will be contaminated by the former.\nconst amountSCSHex = (function () {\n  const se = new bcs.BcsSerializer();\n  se.serializeU128(BigInt(sendAmountNanoSTC.toString(10)));\n  return hexlify(se.getBytes());\n})();\n\nconst args = [arrayify(toAccount), arrayify(amountSCSHex)];\n\nconst scriptFunction = utils.tx.encodeScriptFunction(functionId, tyArgs, args);\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Check ",(0,r.kt)("a",{parentName:"p",href:"/docs/web3/understanding-resource-and-bcs/bcs-in-js"},"BCS in JS SDK")," for more details.")),(0,r.kt)("p",null,"If we don't want to manually generate the bcs of each element of array typeArgs and args, we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"utils.tx.encodeScriptFunctionByResolve")," directly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const functionId = "0x1::TransferScripts::peer_to_peer_v2";\nconst tyArgs = ["0x1::STC::STC"];\nconst toAccount = document.getElementById("toAccountInput").value;\nconst BIG_NUMBER_NANO_STC_MULTIPLIER = new BigNumber("1000000000");\nconst sendAmountSTC = new BigNumber(\n  String(document.getElementById("amountInput").value),\n  10\n);\nconst sendAmountNanoSTC = sendAmountSTC.times(BIG_NUMBER_NANO_STC_MULTIPLIER);\nconst args = [toAccount, sendAmountSTC];\n\nconst nodeUrl = nodeUrlMap[window.starcoin.networkVersion];\n\nconst scriptFunction = await utils.tx.encodeScriptFunctionByResolve(\n  functionId,\n  tyArgs,\n  args,\n  nodeUrl\n);\n')),(0,r.kt)("p",null,"Finally, generate the rawUserTransaction hex string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const payloadInHex = (function () {\n  const se = new bcs.BcsSerializer();\n  scriptFunction.serialize(se);\n  return hexlify(se.getBytes());\n})();\n")),(0,r.kt)("h2",{id:"3-wake-up-the-starmask-and-asking-the-user-to-confirm-the-transaction"},"3. Wake up the StarMask and asking the user to confirm the transaction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const txParams = {\n  data: payloadInHex,\n};\n\nconst transactionHash = await starcoinProvider\n  .getSigner()\n  .sendUncheckedTransaction(txParams);\n")),(0,r.kt)("p",null,"The StarMask will pop up a transaction confirm page, display the estimated gas fee in the ",(0,r.kt)("inlineCode",{parentName:"p"},"DETAILS")," tab ,and the scriptFunction params and the hex string in the ",(0,r.kt)("inlineCode",{parentName:"p"},"DATA")," tab."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"starmask-confirm",src:e(9314).Z,width:"360",height:"622"})),(0,r.kt)("p",null,"User can either ",(0,r.kt)("inlineCode",{parentName:"p"},"Reject")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Confirm")," this transaction."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Tips: before user click either of these two buttons, the Dapp should display a Loading status.")),(0,r.kt)("h2",{id:"4-wait-until-the-transaction-was-confirmed-on-the-starcoin-blockchain-and-display-the-result"},"4. Wait until the transaction was confirmed on the Starcoin blockchain, and display the result"),(0,r.kt)("p",null,"A transaction must be confirmed by enough nodes, we can change this in the constant variable ",(0,r.kt)("inlineCode",{parentName:"p"},"MAX_CONFIRMED_NODES"),".\nWe need to display a loading status, and long polling the staus of the transaction using ",(0,r.kt)("inlineCode",{parentName:"p"},"transactionHash"),", and check the confirmations of the response, and cancle the loading status until confirmations is equal to or larger than ",(0,r.kt)("inlineCode",{parentName:"p"},"MAX_CONFIRMED_NODES"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const MAX_CONFIRMED_NODES = 6;\ncontractStatus2.innerHTML = `Transaction is waiting confirmed `;\nlet timer = setInterval(async () => {\n  const txnInfo = await starcoinProvider.getTransactionInfo(transactionHash);\n  if (txnInfo.status === "Executed") {\n    contractStatus2.innerHTML = `Transaction ${txnInfo.confirmations} confirmed `;\n    if (txnInfo.confirmations >= MAX_CONFIRMED_NODES) {\n      clearInterval(timer);\n      contractStatus2.innerHTML = "Call Completed";\n      callContractButton.disabled = false;\n    }\n  }\n}, 3000);\n')),(0,r.kt)("admonition",{title:"Tip",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If StarMask connect to a dev network, you may need to generate new blocks manually. Run dev gen-block in console up to MAX_CONFIRMED_NODES times and see what happens.")),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://starcoin.org/zh/developer/sdk/javascript/"},"Starcoin JS SDK"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/starcoinorg/starmask-test-dapp"},"StarMask Test Dapp"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/starcoinorg/starcoin-test-dapp-react"},"Developing Dapp with React"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://starcoin.org/zh/developers/others/how_to_use_vue_to_develop_dapp/"},"Developing Dapp with Vue3")))))}u.isMDXComponent=!0},9314:function(t,n,e){n.Z=e.p+"assets/images/starmask-confirm-3733b5ada1e3d2a0f66a42153fb8828a.png"}}]);